from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from states import Register

from groups import get_schedule, student_groups, df

router = Router()

@router.message(CommandStart())
async def register(message: Message, state: FSMContext):
    await message.answer('–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!')
    await state.set_state(Register.group_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã: ")

@router.message(Register.group_number)
async def process_group_number(message: Message, state: FSMContext):
    if message.text.upper() in student_groups:
        await state.update_data(group_number=message.text.upper())
        await message.answer("–ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞!")
        await message.answer(f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {message.text.upper()}")
        await state.set_state(Register.today_day)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:\n–ø–Ω\n–≤—Ç\n—Å—Ä\n—á—Ç\n–ø—Ç")
    else:
        await message.answer("–£–ø—Å! –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç—É! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@router.message(Register.today_day)
async def group(message: Message, state: FSMContext):
    await state.update_data(today_day=message.text.lower())
    data = await state.get_data()
    group_number = data.get('group_number')
    today_day = data.get('today_day')
    schedule = get_schedule(df, group_number, today_day)
    await message.answer(f"üìñ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {schedule}")
